		/*
		if (se != s_e) 
		{
			console.log('updating excitatory kernel');
			s_e = se;
			/* reinitialize E kernel */
			k_e_n = 2*3*Math.ceil(s_e)+1;
			k_e = new Array(k_e_n);
			k_e_int = new Uint8ClampedArray(k_e_n);
			k_e_o = Math.floor(k_e_n/2.0);
			sum = 0;
			for (var i=0; i<k_e_n; i++) {
				var x = i-k_e_o;
				var y = Math.exp(-(x*x/(s_e*s_e)));
				k_e[i] = y;
				sum += y;
			}
			for (var i=0; i<k_e_n; i++) k_e[i]/=sum;
		}
		
		if (si != s_i) 
		{
			console.log('updating inhibitory kernel');
			s_i = si;
			/* reinitialize I kernel */
			k_i_n = 2*3*Math.ceil(s_i)+1;
			k_i = new Array(k_i_n);
			k_i_int = new Uint8ClampedArray(k_i_n);
			k_i_o = Math.floor(k_i_n/2.0);
			sum = 0;
			for (var i=0; i<k_i_n; i++) {
				var x = i-k_i_o;
				var y = Math.exp(-(x*x/(s_i*s_i)));
				k_i[i] = y;
				sum += y;
			}
			for (var i=0; i<k_i_n; i++) k_i[i]/=sum;
		}
		*/
